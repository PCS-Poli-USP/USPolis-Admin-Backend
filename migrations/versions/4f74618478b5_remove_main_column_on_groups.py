"""Remove main column on groups

Revision ID: 4f74618478b5
Revises: 86626d7aaeee
Create Date: 2025-05-08 01:26:32.429288

"""

from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session as SASession
from sqlmodel import Session, col, select, update

from server.models.database.building_db_model import Building
from server.models.database.group_classroom_link import GroupClassroomLink
from server.models.database.group_db_model import Group
from server.models.database.group_user_link import GroupUserLink
from server.models.database.user_building_link import UserBuildingLink
from server.models.database.user_db_model import User


# revision identifiers, used by Alembic.
revision: str = "4f74618478b5"
down_revision: str | None = "86626d7aaeee"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    bind = op.get_bind()
    session = Session(bind=bind)

    metadata = sa.MetaData()
    groups_table = sa.Table("group", metadata, autoload_with=bind)
    buildings = session.exec(
        select(Building).where(
            ~sa.exists().where(
                sa.and_(
                    col(groups_table.c.building_id) == Building.id,
                    col(groups_table.c.main),  # type: ignore
                )
            )
        )
    ).all()

    op.drop_column("group", "main")
    for building in buildings:
        group = Group(
            name=building.name,
            building_id=building.id,  # type: ignore
        )
        session.add(group)
        session.flush()  # group.id seja gerado

    buildings = session.exec(select(Building)).all()
    for building in buildings:
        # Getting the main group
        subquery = select(Group.id).where(col(GroupClassroomLink.group_id) == Group.id)
        statement = select(Group).where(
            col(Group.building_id) == building.id, ~sa.exists(subquery)
        )
        group = session.exec(statement).one()

        # Getting the users that are not in an group
        # and are in the building
        subquery = select(User.id).where(
            col(GroupUserLink.user_id) == User.id,
        )
        users = session.exec(
            select(User)
            .join(UserBuildingLink)
            .where(
                col(UserBuildingLink.building_id) == building.id,
                col(UserBuildingLink.user_id) == User.id,
                ~sa.exists(subquery),
            )
        ).all()
        users = list(users)
        # Inserting the users in the main group
        current_users = set(group.users)
        new_users = set(users)
        final_users = current_users.union(new_users)
        print(final_users)
        print(building.name)
        group.users = list(final_users)
        session.add(group)

    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "group",
        sa.Column(
            "main",
            sa.BOOLEAN(),
            autoincrement=False,
            nullable=False,
            server_default=sa.text("false"),
        ),
    )

    bind = op.get_bind()
    session = SASession(bind=bind)
    metadata = sa.MetaData()
    groups_table = sa.Table("group", metadata, autoload_with=bind)

    subquery = select(GroupClassroomLink.group_id).where(
        GroupClassroomLink.group_id == Group.id
    )
    groups = session.execute(select(Group).where(~sa.exists(subquery))).all()
    for row in groups:
        group = row[0]
        statement = (
            update(groups_table)
            .where(col(groups_table.c.id) == group.id)
            .values(main=True)
        )
        session.execute(statement)

    session.commit()
